@page "/"
@inject HttpClient Http
@if (_isCreate)
{
    <form onsubmit=@Submit class="card mt-5">
        <div class="card-body">
            <div class="form-group">
                <label for="title">スレッドタイトル</label>
                <input type="text" class="form-control@(_errors.ContainsKey("title") ? " is-invalid" : "")" id="title" bind="@_thread.Title" placeholder="スレッドタイトル"/>
                @if (_errors.ContainsKey("title"))
                {
                    <div class="invalid-feedback">@_errors["title"]</div>
                }
            </div>
            <div class="form-group">
                <label for="name">名前(省略化)</label>
                <input type="text" class="form-control" id="name" bind="@_response.Name" placeholder="@blazor.Shared.Define.DefaultName"/>
            </div>
            <div class="form-group">
                <label for="body">本文</label>
                <textarea class="form-control@(_errors.ContainsKey("body") ? " is-invalid" : "")" id="body" rows="10" placeholder="本文" bind="@_response.Body"></textarea>
                @if (_errors.ContainsKey("body"))
                {
                    <div class="invalid-feedback">@_errors["body"]</div>
                }
            </div>
            <button type="submit" class="btn btn-primary">作成</button>
            <button type="button" class="btn btn-secondary" onclick="@ToggleCreate">キャンセル</button>
        </div>
        
    </form>
}
else
{
    <button class="btn btn-primary mb-3 mt-5" type="button" onclick="@ToggleCreate">スレッド作成</button>

    foreach (var thread in _threads)
    {
        <div class="card mb-2">
            <div class="card-body">
                <h5 class="card-title">
                    <NavLink href="@("thread/" + thread.Id)">@thread.Title (@thread.Count)</NavLink>
                </h5>
                <p class="card-text">
                    
                    <span class="mr-1">最新書込：@thread.LastWritten.ToString("yyyy/MM/dd HH:mm:ss")</span>
                    <span>作成：@thread.Created.ToString("yyyy/MM/dd HH:mm:ss")</span>
                </p>
            </div>
        </div>
    }
}
@functions
{

    List<blazor.Shared.BoardThread> _threads = new List<blazor.Shared.BoardThread>();
    blazor.Shared.BoardThread _thread = new blazor.Shared.BoardThread();
    blazor.Shared.BoardResponse _response = new blazor.Shared.BoardResponse();

    Dictionary<string, string> _errors = new Dictionary<string, string>();
    
    bool _isCreate = false;
    
    protected override async Task OnInitAsync()
    {
        await Refresh();
    }
    
    async Task Submit()
    {
        _errors.Clear();
        if (string.IsNullOrWhiteSpace(_thread.Title))
        {
            _errors.Add("title", "スレッドタイトルを入力してください");
        }
        if (string.IsNullOrWhiteSpace(_response.Body))
        {
            _errors.Add("body", "本文を入力してください");
        }
        if (_errors.Count > 0)
        {
            return;
        }
        
        _thread.BoardResponses = new List<blazor.Shared.BoardResponse>(){ _response };
        await Http.PostJsonAsync("api/boardthread/", _thread);
        await Refresh();
        _errors.Clear();
        _response = new blazor.Shared.BoardResponse();
        _thread = new blazor.Shared.BoardThread();
        _isCreate = false;
    }

    async Task Refresh()
    {
        _threads = await Http.GetJsonAsync<List<blazor.Shared.BoardThread>>("api/boardthread/");
    }

    void ToggleCreate()
    {
        _isCreate = !_isCreate;
    }
    
    

}
